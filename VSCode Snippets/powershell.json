{
	// Place your snippets for powershell here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// \t$1, \t$2 for tab stops, \t$0 for the final cursor position, and \t${1:label}, \t${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('\t$1');",
	// 		"\t$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Advanced General Logging Function": {
		"prefix": "function-advanced-error/logger",
		"body": [
		  "function Verb-Noun {",
		  "    <#",
		  "    .SYNOPSIS",
		  "        A brief description of the function or script.",
		  "    .DESCRIPTION",
		  "        A longer description.",
		  "    .PARAMETER FirstParameter",
		  "        Description of each of the parameters.",
		  "        Note:",
		  "        To make it easier to keep the comments synchronized with changes to the parameters,",
		  "        the preferred location for parameter documentation comments is not here,",
		  "        but within the param block, directly above each parameter.",
		  "    .PARAMETER SecondParameter",
		  "        Description of each of the parameters.",
		  "    .INPUTS",
		  "        Description of objects that can be piped to the script.",
		  "    .OUTPUTS",
		  "        Description of objects that are output by the script.",
		  "    .EXAMPLE",
		  "        Example of how to run the script.",
		  "    .LINK",
		  "        Links to further documentation.",
		  "    .NOTES",
		  "        Detail on what the script does, if this is needed.",
		  "    #>",
		  "    [CmdletBinding(DefaultParameterSetName='Parameter Set 1',",
		  "        SupportsShouldProcess,",
		  "        PositionalBinding,",
		  "        HelpUri = 'http://www.microsoft.com/',",
		  "        ConfirmImpact='Medium')]",
		  "    [Alias()]",
		  "    [OutputType([String])]",
		  "    Param (",
		  "        # Param1 help description",
		  "        [Parameter(Mandatory,",
		  "            Position=0,",
		  "            ValueFromPipeline,",
		  "            ValueFromPipelineByPropertyName,",
		  "            ValueFromRemainingArguments, ",
		  "            ParameterSetName='Parameter Set 1')]",
		  "        [ValidateNotNull()]",
		  "        [ValidateNotNullOrEmpty()]",
		  "        [ValidateCount(0,5)]",
		  "        [ValidateSet(\"sun\", \"moon\", \"earth\")]",
		  "        [Alias(\"p1\")] ",
		  "        \\$Param1,",
		  "        ",
		  "        # Param2 help description",
		  "        [Parameter(ParameterSetName='Parameter Set 1')]",
		  "        [AllowNull()]",
		  "        [AllowEmptyCollection()]",
		  "        [AllowEmptyString()]",
		  "        [ValidateScript({\\$true})]",
		  "        [ValidateRange(0,5)]",
		  "        [int]",
		  "        \\$Param2,",
		  "        ",
		  "        [Parameter(",
		  "            ValueFromPipeline,",
		  "            ValueFromPipelineByPropertyName)]",
		  "        [ValidateNotNullOrEmpty()]",
		  "        [String]\\$LogPath = \"C:\\Temp\"",
		  "    )",
		  "    ",
		  "    begin {",
		  "        \\$logger.Notice(\"Starting \\$(\\$MyInvocation.MyCommand) script\")",
		  "",
		  "        # First block to add/change stuff in",
		  "        try {",
		  "            ",
		  "        }",
		  "        catch {",
		  "            \\$logger.Error(\"\\$PSitem\")",
		  "            \\$PSCmdlet.ThrowTerminatingError(\\$PSitem)",
		  "        }",
		  "        ",
		  "    }",
		  "    ",
		  "    process {",
		  "    ",
		  "        try {",
		  "            ",
		  "            if (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\")) {",
		  "                ",
		  "            }",
		  "        }",
		  "        catch {",
		  "            \\$logger.Error(\"\\$PSitem\")",
		  "            \\$PSCmdlet.ThrowTerminatingError(\\$PSitem)",
		  "        }",
		  "    }",
		  "    ",
		  "    end {",
		  "        \\$logger.Notice(\"Finished \\$(\\$MyInvocation.MyCommand) script\")",
		  "        #\\$logger.Remove()",
		  "        ",
		  "    }",
		  "}"
		],
		"description": "Script advanced function definition with error handling and logger snippet (Jon C.)"
	  },
	"Advanced Download Function": {
		"prefix": "function-advanced-downloader",
		"body": [
		  "function Verb-Noun {",
		  "    <#",
		  "    .SYNOPSIS",
		  "        A brief description of the function or script.",
		  "    .DESCRIPTION",
		  "        A longer description.",
		  "    .PARAMETER FirstParameter",
		  "        Description of each of the parameters.",
		  "        Note:",
		  "        To make it easier to keep the comments synchronized with changes to the parameters,",
		  "        the preferred location for parameter documentation comments is not here,",
		  "        but within the param block, directly above each parameter.",
		  "    .PARAMETER SecondParameter",
		  "        Description of each of the parameters.",
		  "    .INPUTS",
		  "        Description of objects that can be piped to the script.",
		  "    .OUTPUTS",
		  "        Description of objects that are output by the script.",
		  "    .EXAMPLE",
		  "        Example of how to run the script.",
		  "    .LINK",
		  "        Links to further documentation.",
		  "    .NOTES",
		  "        Detail on what the script does, if this is needed.",
		  "    #>",
		  "    [CmdletBinding(DefaultParameterSetName='Parameter Set 1',",
		  "        SupportsShouldProcess,",
		  "        PositionalBinding,",
		  "        HelpUri = 'http://www.microsoft.com/',",
		  "        ConfirmImpact='Medium')]",
		  "    [Alias()]",
		  "    [OutputType([String])]",
		  "    Param (",
		  "        # Param1 help description",
		  "        [Parameter(Mandatory,",
		  "            Position=0,",
		  "            ValueFromPipeline,",
		  "            ValueFromPipelineByPropertyName,",
		  "            ValueFromRemainingArguments, ",
		  "            ParameterSetName='Parameter Set 1')]",
		  "        [ValidateNotNull()]",
		  "        [ValidateNotNullOrEmpty()]",
		  "        [ValidateCount(0,5)]",
		  "        [ValidateSet(\"sun\", \"moon\", \"earth\")]",
		  "        [Alias(\"p1\")] ",
		  "        \\$Uri,",
		  "        ",
		  "        # Param2 help description",
		  "        [Parameter(ParameterSetName='Parameter Set 1')]",
		  "        [String]\\$Destination,",
		  "        ",
		  "        [Parameter(",
		  "            ValueFromPipeline,",
		  "            ValueFromPipelineByPropertyName)]",
		  "        [ValidateNotNullOrEmpty()]",
		  "        [String]\\$LogPath = \"\\\\wrpwi\\Comptech\\_DownloadLogs\"",
		  "    )",
		  "    ",
		  "    begin {",
		  "        \\$logger.Notice(\"Starting \\$(\\$MyInvocation.MyCommand) script\")",
		  "",
		  "        # First block to add/change stuff in",
		  "        try {",
		  "            \\$uri = \"https://edgeupdates.microsoft.com/api/products?view=enterprise\"",
		  "            \\$response = Invoke-WebRequest -Uri \\$uri -Method Get -ContentType \"application/json\" -ErrorAction Stop",
		  "            if (\\$response.StatusCode -ne 200) {",
		  "                \\$logger.Error(\"\\$uri had a status code of \\$(\\$response.StatusCode)\")",
		  "            }",
		  "            \\$logger.informational(\"Status code: \\$(\\$response.StatusCode)\")",
		  "            ",
		  "        }",
		  "        catch {",
		  "            \\$logger.Error(\"\\$PSitem\")",
		  "            \\$PSCmdlet.ThrowTerminatingError(\\$PSitem)",
		  "        }",
		  "        ",
		  "    }",
		  "    ",
		  "    process {",
		  "    ",
		  "        try {",
		  "            ",
		  "            if (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\")) {",
		  "                ",
		  "            }",
		  "        }",
		  "        catch {",
		  "            \\$logger.Error(\"\\$PSitem\")",
		  "            \\$PSCmdlet.ThrowTerminatingError(\\$PSitem)",
		  "        }",
		  "    }",
		  "    ",
		  "    end {",
		  "        \\$logger.Notice(\"Finished \\$(\\$MyInvocation.MyCommand) script\")",
		  "        #\\$logger.Remove()",
		  "        ",
		  "    }",
		  "}"
		],
		"description": "Advanced Download Function"
	  },
	"Advanced General Function": {
		"prefix": "function-advanced-error-handling",
		"body": [
		  "function Verb-Noun {",
		  "    <#",
		  "    .SYNOPSIS",
		  "        A brief description of the function or script.",
		  "    .DESCRIPTION",
		  "        A longer description.",
		  "    .PARAMETER FirstParameter",
		  "        Description of each of the parameters.",
		  "        Note:",
		  "        To make it easier to keep the comments synchronized with changes to the parameters,",
		  "        the preferred location for parameter documentation comments is not here,",
		  "        but within the param block, directly above each parameter.",
		  "    .PARAMETER SecondParameter",
		  "        Description of each of the parameters.",
		  "    .INPUTS",
		  "        Description of objects that can be piped to the script.",
		  "    .OUTPUTS",
		  "        Description of objects that are output by the script.",
		  "    .EXAMPLE",
		  "        Example of how to run the script.",
		  "    .LINK",
		  "        Links to further documentation.",
		  "    .NOTES",
		  "        Detail on what the script does, if this is needed.",
		  "    #>",
		  "    [CmdletBinding(DefaultParameterSetName='Parameter Set 1',",
		  "        SupportsShouldProcess,",
		  "        PositionalBinding,",
		  "        HelpUri = 'http://www.microsoft.com/',",
		  "        ConfirmImpact='Medium')]",
		  "    [Alias()]",
		  "    [OutputType([String])]",
		  "    Param (",
		  "        # Param1 help description",
		  "        [Parameter(Mandatory,",
		  "            Position=0,",
		  "            ValueFromPipeline,",
		  "            ValueFromPipelineByPropertyName,",
		  "            ValueFromRemainingArguments, ",
		  "            ParameterSetName='Parameter Set 1')]",
		  "        [ValidateNotNull()]",
		  "        [ValidateNotNullOrEmpty()]",
		  "        [ValidateCount(0,5)]",
		  "        [ValidateSet(\"sun\", \"moon\", \"earth\")]",
		  "        [Alias(\"p1\")] ",
		  "        \\$Uri,",
		  "        ",
		  "        # Param2 help description",
		  "        [Parameter(ParameterSetName='Parameter Set 1')]",
		  "        [String]\\$Destination",
		  "    )",
		  "    ",
		  "    begin {",
		  "",
		  "        # First block to add/change stuff in",
		  "        try {",
		  "        }",
		  "        catch {",
		  "            \\$PSCmdlet.ThrowTerminatingError(\\$PSitem)",
		  "        }",
		  "        ",
		  "    }",
		  "    ",
		  "    process {",
		  "    ",
		  "        try {",
		  "            ",
		  "            if (\\$PSCmdlet.ShouldProcess(\"Target\", \"Operation\")) {",
		  "                ",
		  "            }",
		  "        }",
		  "        catch {",
		  "            \\$PSCmdlet.ThrowTerminatingError(\\$PSitem)",
		  "        }",
		  "    }",
		  "    ",
		  "    end {",
		  "        ",
		  "    }",
		  "}"
		],
		"description": "Script advanced function definition with error handling snippet (Jon C.)"
	  },
	"Advanced Scriptblock": {
		"prefix": "advanced-scriptblock",
		"body": [
		  "[scriptblock]\\$scriptblock = {",
		  "    try {",
		  "        \\$WhatIfPreference = \\$using:WhatIfPreference",
		  "        \\$ConfirmPreference = \\$using:ConfirmPreference",
		  "        \\$VerbosePreference = \\$using:VerbosePreference",
		  "    }",
		  "    catch {",
		  "        \\$PSCmdlet.ThrowTerminatingError(\\$PSItem)",
		  "    }",
		  "}"
		],
		"description": "Advanced scriptblock definition with error handling and processing inheritance (Jon C.)"
	  }
}